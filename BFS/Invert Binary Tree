class Solution:
    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        # BFS
        # same level => swap

        if not root:
            return None
        
        queue = deque([root])

        while queue:
            node = queue.popleft()

            node.left, node.right = node.right, node.left
            
            for child in [node.left, node.right]:
                if child is not None:
                    queue.append(child)
        return root
