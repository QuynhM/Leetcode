def binary_tree_min_depth(root: Node) -> int:
    queue = deque([root])
    depth = -1 # we start from -1 because popping root will add 1 depth
    
    while queue:
        n = len(queue)
        depth += 1
        
        for i in range(n):
            node = queue.popleft()
            if node.left is None and node.right is None:
                return depth
            for child in [node.left, node.right]:
                queue.append(child)          
    
    return depth
