Given an array (list) nums consisted of only non-negative integers, find the largest sum among all subarrays of length k in nums.

For example, if the input is nums = [1, 2, 3, 7, 4, 1], k = 3, then the output would be 14 as the largest length 3 subarray sum is 
given by [3, 7, 4] which sums to 14.

// SOLUTION //

function subarraySumFixed(nums, k) {
   max_sum = window_sum = nums.slice(0,k).reduce((a, b) => a + b, 0) // sum of the whole nums array
    for (let right = k; right < nums.length; right++) {
        window_sum += nums[right] - nums[right-k]
        max_sum = Math.max(max_sum, window_sum) // find the bigger one between max_sum and window_sum
    }
    return max_sum;
}

// (n-k) * (k+2) => (n-k)*k if k = n/2 => n/2*n/2 = n*2/4 => n^2
//Time: k+(n-k)*(2+2) = k+4(n-k) = 4n-3k => O(n)
//Space: O(1)

let nums = [1, 2, 3, 7, 4, 1];
let k = 3;
console.log(subarraySumFixed(nums, k))
