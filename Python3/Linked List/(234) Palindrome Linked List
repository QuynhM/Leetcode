  def isPalindrome(self, head: Optional[ListNode]) -> bool:
        # Cach 1: Convert to array 
        # O(n) time and space complexity
        
        # nums = []

        # while head:
        #     nums.append(head.val)
        #     head = head.next

        # l,r = 0, len(nums) - 1

        # while l <= r:
        #     if nums[l] != nums[r]:
        #         return False
        #     l += 1
        #     r -= 1

        # return True

# ----------------------------------------------------
        # Cach 2:
        # O(1) space complexity

        fast = head
        slow = head

        # Find middle (slow pointer)
        while fast and fast.next:
            fast = fast.next.next
            slow = slow.next
        
        print(slow)
        # Reverse the second hald
        prev = None
        
        while slow:
            tmp = slow.next
            slow.next = prev
            prev = slow
            slow = tmp
            
        print(prev)
        
        # Check palindrome
        left, right = head, prev
        while right:
            if left.val != right.val:
                return False

            left = left.next
            right = right.next
        
        return True
