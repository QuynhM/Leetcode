from typing import Optional

# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:
        cur = head
        # Space and Time is 0(n)
        # Using a set (with Temporary Buffer)
        
        # seen = set()
        # seen.add(cur.val)
        
        # while cur and cur.next:
        #     if cur.next.val in seen:
        #       cur.next = cur.next.next
        #     else:
        #       seen.add(cur.next.val)
        #       cur = cur.next
        
        # Time is O(n2) and Space is O(1)
        # No need to add extra thing
        while cur:
          runner = cur
          while runner.next:
            if runner.next.val == cur.val:
              runner.next = runner.next.next
            else:
              runner = runner.next
          cur = cur.next
              
        return head

# Helper function to create a linked list from a list
def create_linked_list(arr):
    if not arr:
        return None
    head = ListNode(arr[0])
    current = head
    for val in arr[1:]:
        current.next = ListNode(val)
        current = current.next
    return head

# Helper function to print the linked list
def print_linked_list(head):
    current = head
    while current:
        print(current.val, end=" -> " if current.next else "\n")
        current = current.next

# Create the linked list from the given list
head = create_linked_list([5,1,4,5,2,3])

# Run deleteDuplicates
solution = Solution()
new_head = solution.deleteDuplicates(head)

# Print the result
print_linked_list(new_head)
