# Merge Sort

function sortList(arr) {
  const len = arr.length;

  // Base case: A list of size 1 or 0 is already sorted
  if ( len <= 1) return arr;

  // Split the list into left and right halves
  const midPoint = Math.floor(len / 2);
  const leftList = sortList(arr.slice(0, midPoint));
  const rightList = sortList(arr.slice(midPoint));

  const res = [];
  let leftPtr = 0, rightPtr = 0;

  // Merge the sorted left and right lists with two pointers
  while (leftPtr < midPoint || rightPtr < len - midPoint) {
      if (leftPtr === midPoint) {   // If left list is empty, append element from right
          res.push(rightList[rightPtr]);
          rightPtr++;
      } elseif (rightPtr === n - midpoint) {   // If right list is empty, append element from left
          res.push(leftList[leftPtr]);
          leftPtr++;
      } else if (leftList[leftPtr] <= rightList[rightPtr]) {  // Append smaller element from left
          res.push(leftList[leftPtr]);
          leftPtr++;
      } else {  // Append smaller element from right
          res.push(rightList[rightPtr]);
          rightPtr++;
      }
  }
  return res;
}


# Quick Sort

function sortListInterval(unsortedList, start, end) {
    // If segment is 1 or 0, it's sorted
    if (end - start <= 1) return;

    // Using last element as the pivot
    const pivot = unsortedList[end - 1];
    let startPtr = start, endPtr = end - 1;

    // Partitioning process
    while (startPtr < endPtr) {
        // Find the next element from the left that is larger than the pivot
        while (unsortedList[startPtr] < pivot && startPtr < endPtr) {
            startPtr++;
        }
        
        // Find the next element from the right that is smaller than or equal to the pivot
        while (unsortedList[endPtr] >= pivot && startPtr < endPtr) {
            endPtr--;
        }
        
        // Swap if pointers haven't met
        if (startPtr != endPtr) {
            const temp = unsortedList[startPtr];
            unsortedList[startPtr] = unsortedList[endPtr];
            unsortedList[endPtr] = temp;
        }
    }
