function binarySearch(arr, target) {
    let start = 0;
    let end = arr.length - 1;
    
    while (start <= end) {
        let mid = Math.floor((start + end) / 2);
        
        if (arr[mid] === target) {
            return mid; // Target found at index mid
        } else if (arr[mid] < target) {
            start = mid + 1; // Continue search in the right half
        } else {
            end = mid - 1; // Continue search in the left half
        }
    }
    
    return -1;
}



// Find the First True in a Sorted Boolean Array
An array of boolean values is divided into two sections: The left section consists of all false, 
and the right section consists of all true. Find the First True in a Sorted Boolean Array of the 
right section, i.e., the index of the first true element. If there is no true element, return -1.

Input: arr = [false, false, true, true, true]

Output: 2

Explanation: The first true's index is 2.

function findBoundary(arr) {
    let left = 0;
    let right = arr.length - 1;
    // If there is no true element, return -1.
    let boundaryIndex = -1;
    
    while (left <= right) {
        let mid = Math.floor((left + right) / 2);
        if (arr[mid]) {
            boundaryIndex = mid;
            right = mid - 1;
        } else {
            left = mid + 1
        }
    }
    return boundaryIndex;
}
