// 1 //  First Element Not Smaller Than Target
// Given an array of integers sorted in increasing order and a target, 
find the index of the first element in the array that is larger than or equal to the target. 
Assume that it is guaranteed to find a satisfying number.

Input:
arr = [1, 3, 3, 5, 8, 8, 10]
target = 2

Output: 1


SOLUTION:

function firstNotSmaller(arr, target) {
    let left = 0;
    let right = arr.length - 1;
    let index = 0
    
    while (left <= right) {
        let mid = Math.floor((left + right) / 2);
        
        if (arr[mid] < target) {
            left = mid + 1;
        } else {
            index = mid;
            right = mid - 1;
        }
    }
    
    return index;
}



// 2 // Find Element in Sorted Array with Duplicates
Given a sorted array of integers and a target integer, find the first occurrence of the 
target and return its index. Return -1 if the target is not in the array.

Input:
arr = [1, 3, 3, 3, 3, 6, 10, 10, 10, 100]
target = 3

Output: 1

SOLUTION: 

function findFirstOccurrence(arr, target) {
    let left = 0;
    let right = arr.length - 1;
    let targetIndex = -1;
    
    while (left <= right) {
        let mid = Math.floor((left + right) / 2);
        
        if (arr[mid] == target) {
            targetIndex = mid;
            right = mid - 1;
        } else if (arr[mid] < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    
    return targetIndex;
}



// 3 // Square Root Estimation
Given an integer, find its square root without using the built-in square root function. 
Only return the integer part (truncate the decimals).

Input: 16

Output: 4

SOLUTION: 

function squareRoot(n) {
    if (n === 0) return 0;
    
    let left = 1;
    let right = n;
    let res = 0;
    
    while (left <= right) {
        let mid = Math.floor((left + right) / 2);
        
        if (mid * mid == n) {
            return mid;
        } else if (mid * mid < n) {
            res = mid; // mid is a candidate for the square root
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    return res;
}


// 4 // Find Minimum in Rotated Sorted Array
// A sorted array of unique integers was rotated at an unknown pivot. For example, [10, 20, 30, 40, 50] becomes [30, 40, 50, 10, 20]. 
Find the index of the minimum element in this array.
Input: [30, 40, 50, 10, 20]
Output: 3
Explanation: The smallest element is 10, and its index is 3.

SOLUTION: 

function findMinRotated(arr) {
    let left = 0;
    let right = arr.length - 1;

    while (left < right) {
        let mid = Math.floor((left + right) / 2);

        // If mid element is greater than the last element, the min is in the right half
        if (arr[mid] > arr[right]) {  
            left = mid + 1;
        } else {  // Otherwise, the min is in the left half including mid
            right = mid - 1;
        }
    }
    return left;
}

let arr = [30, 40, 50, 10, 20];
console.log("ANSWER:", findMinRotated(arr))


// 5 // The Peak of a Mountain Array
// A mountain array is defined as an array that has at least 3 elements
has an element with the largest value called "peak", with index k. The array elements strictly increase from the first element 
to A[k], and then strictly decrease from A[k + 1] to the last element of the array. Thus creating a "mountain" of numbers.
That is, given A[0]<...<A[k-1]<A[k]>A[k+1]>...>A[n-1], we need to find the index k. Note that the peak element is neither \
the first nor the lastIndex of the array.

Find the index of the peak element. Assume there is only one peak element.
Input: 0 1 2 3 2 1 0
Output: 3
Explanation: The largest element is 3, and its index is 3.

SOLUTION: 

function peakOfMountainArray(arr) {
    let left = 0;
    let right = arr.length - 1;

    while (left < right) {
        let mid = Math.floor((left + right) / 2);

        // Check if mid is greater than the next element
        if (arr[mid] > arr[mid + 1]) {
            // We are in the decreasing part of the mountain, so the peak is to the left
            right = mid;
        } else {
            // We are in the increasing part of the mountain, so the peak is to the right
            left = mid + 1;
        }
    }
    // At the end of the loop, left == right and pointing to the peak element
    return left;
}

 
