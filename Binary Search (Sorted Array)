// 1 //  First Element Not Smaller Than Target
// Given an array of integers sorted in increasing order and a target, 
find the index of the first element in the array that is larger than or equal to the target. 
Assume that it is guaranteed to find a satisfying number.

Input:
arr = [1, 3, 3, 5, 8, 8, 10]
target = 2

Output: 1


SOLUTION:

function firstNotSmaller(arr, target) {
    let left = 0;
    let right = arr.length - 1;
    let index = 0
    
    while (left <= right) {
        let mid = Math.floor((left + right) / 2);
        
        if (arr[mid] < target) {
            left = mid + 1;
        } else {
            index = mid;
            right = mid - 1;
        }
    }
    
    return index;
}



// 2 // Find Element in Sorted Array with Duplicates
Given a sorted array of integers and a target integer, find the first occurrence of the 
target and return its index. Return -1 if the target is not in the array.

Input:
arr = [1, 3, 3, 3, 3, 6, 10, 10, 10, 100]
target = 3

Output: 1

SOLUTION: 

function findFirstOccurrence(arr, target) {
    let left = 0;
    let right = arr.length - 1;
    let targetIndex = -1;
    
    while (left <= right) {
        let mid = Math.floor((left + right) / 2);
        
        if (arr[mid] == target) {
            targetIndex = mid;
            right = mid - 1;
        } else if (arr[mid] < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    
    return targetIndex;
}



// 3 // Square Root Estimation
Given an integer, find its square root without using the built-in square root function. 
Only return the integer part (truncate the decimals).

Input: 16

Output: 4

SOLUTION: 

function squareRoot(n) {
    if (n === 0) return 0;
    
    let left = 1;
    let right = n;
    let res = 0;
    
    while (left <= right) {
        let mid = Math.floor((left + right) / 2);
        
        if (mid * mid == n) {
            return mid;
        } else if (mid * mid < n) {
            res = mid; // mid is a candidate for the square root
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    return res;
}

