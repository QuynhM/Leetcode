#1 Use self.
class Solution:
    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        if not root:
            return None
        
        temp = root.left
        root.left = root.right
        root.right = temp

        self.invertTree(root.left)
        self.invertTree(root.right)

        return root

#2 Use helper function
class Solution:
    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        def helper(node: Optional[TreeNode]) -> Optional[TreeNode]:
            if not node:
                return None

            # Swap left and right subtrees
            temp = node.left
            node.left = node.right
            node.right = temp

            # Recursive calls to invert left and right subtrees
            helper(node.left)
            helper(node.right)

            return node

        return helper(root)
